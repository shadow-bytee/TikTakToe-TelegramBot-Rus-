from settings import *
from db_utils import *
from utils import *

import telebot
from telebot import types
from telebot.types import LabeledPrice
import sqlite3
import datetime
import random
from colorama import Fore, Back, Style
import json
 
not_id = None

def callback_processing(callback):
	global not_id

	print(f"[{str(datetime.datetime.now())}] –ò–≥—Ä–æ–∫ @{callback.from_user.username} (id-{callback.from_user.id}) –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É " + Fore.YELLOW + callback.data + Style.RESET_ALL)

	if callback.data == "balance":
		bot.delete_message(callback.from_user.id, callback.message.message_id)
		
		balance = get_user_balance(callback.from_user.id)

		markup = create_markup([
			[("–ü–æ–ø–æ–ª–Ω–∏—Ç—å", "deposit"), ("–í—ã–≤–µ—Å—Ç–∏", "withdrawal")],
			[("üîô–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "menu")]
		])

		bot.send_message(
			callback.from_user.id,
			f"üñçid: <code>{callback.from_user.id}</code>\n\n"
			f"üí≥–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{balance}</b>‚≠ê",
			reply_markup=markup,
			parse_mode="HTML"
		)

	elif callback.data == "game":
		bot.delete_message(callback.from_user.id, callback.message.message_id)
		balance = get_user_balance(callback.from_user.id)
		if balance >= 100:
			user_id = callback.from_user.id
			room_id = find_or_create_room(user_id)
			if room_id != None:
				room_info = get_room_info(room_id)
	
				print(Fore.BLUE + f"[{str(datetime.datetime.now())}] –ò–≥—Ä–æ–∫ @{callback.from_user.username} (id-{user_id}) –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ id-{room_id}" + Style.RESET_ALL)
		
				if room_info[1] is None:
					markup = types.InlineKeyboardMarkup()
					btn1 = types.InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data="leave_wait")
					markup.row(btn1)
					m = bot.send_message(callback.from_user.id, f"–û–∂–∏–¥–∞–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...", reply_markup=markup)
					save_bot_message(callback.from_user.id, m.message_id)

					n = bot.send_message(ADMIN_GROUP, f"–ò–≥—Ä–æ–∫ @{callback.from_user.username} (id-{user_id}) –∏—â–µ—Ç —Å–æ–ø–µ—Ä–Ω–∏–∫–∞", reply_markup=create_markup([("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", "game")]))
					not_id = n.message_id
				else:
					print(room_info)
					bot.delete_message(room_info[0], get_last_bot_message_id(room_info[0]))

					update_user_balance(room_info[0], -100)
					update_user_balance(room_info[1], -100)

					bot.send_message(callback.from_user.id, f"–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –°–æ–ø–µ—Ä–Ω–∏–∫ - {bot.get_chat(room_info[0]).first_name}")
					bot.send_message(room_info[0], f"–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –°–æ–ø–µ—Ä–Ω–∏–∫ - {callback.from_user.first_name}")

					text = (
						f"üíé–ë–∞–Ω–∫ <b>195‚≠ê</b>\n\n"
						f"‚ùå - {'üëë' if check_vip_status(callback.from_user.id) else ''}{callback.from_user.first_name} {'üëà' if room_info[2] == callback.from_user.id else ''}\n"
						f"‚≠ïÔ∏è - {'üëë' if check_vip_status(room_info[0]) else ''}{bot.get_chat(room_info[0]).first_name} {'üëà' if room_info[2] == room_info[0] else ''}"
					)
					m1 = bot.send_message(callback.from_user.id, text, reply_markup=create_plits(room_id), parse_mode="HTML")
					m2 = bot.send_message(room_info[0], text, reply_markup=create_plits(room_id), parse_mode="HTML")
					save_bot_message(callback.from_user.id, m1.message_id)
					save_bot_message(room_info[0], m2.message_id)
					print(Fore.MAGENTA + f"[{str(datetime.datetime.now())}] –ò–≥—Ä–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ id-{room_id} –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è" + Style.RESET_ALL)

					if not_id is not None:
						bot.delete_message(ADMIN_GROUP, not_id)
						not_id = None
			else:
				bot.answer_callback_query(callback.id, text="–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —É–∂–µ –≤ –∏–≥—Ä–µ!")
		else:
			markup = create_markup([("–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç", "deposit")])
			bot.send_message(callback.from_user.id, f"–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n–ë–∞–ª–∞–Ω—Å: {balance}‚≠ê", reply_markup=markup)

	elif callback.data == "leave_wait":
		bot.delete_message(callback.from_user.id, callback.message.message_id)

		room_id = get_room_id(callback.from_user.id)

		conn = sqlite3.connect("tictactoe.db")
		cursor = conn.cursor()
		cursor.execute("DELETE FROM rooms WHERE player1_id = ?", (callback.from_user.id,))
		conn.commit()
		conn.close()

		print(Fore.BLUE + f"[{str(datetime.datetime.now())}] –ò–≥—Ä–æ–∫ @{callback.message.chat.username} (id-{callback.from_user.id}) –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É id-{room_id}" + Style.RESET_ALL)
		print(Fore.MAGENTA + f"[{str(datetime.datetime.now())}] –ö–æ–º–Ω–∞—Ç–∞ id-{room_id} —É–¥–∞–ª–µ–Ω–∞" + Style.RESET_ALL)
		# bot.send_message(ADMIN_GROUP, f"–ò–≥—Ä–æ–∫ @{callback.message.chat.username} (id-{callback.from_user.id}) –ø–æ–∫–∏–Ω—É–ª –ø–æ–∏—Å–∫")
		if not_id is not None:
			bot.delete_message(ADMIN_GROUP, not_id)
			not_id = None

		menu_func(callback.from_user.id)
 
	elif callback.data == "menu":
		bot.delete_message(callback.from_user.id, callback.message.message_id)
		menu_func(callback.from_user.id)

	elif callback.data == "deposit":
		bot.delete_message(callback.from_user.id, callback.message.message_id)
		markup = create_markup([
			[("10‚≠ê", "*10"), ("50‚≠ê", "*50")],
			[("100‚≠ê", "*100"), ("200‚≠ê", "*200")],
			[("500‚≠ê", "*500"), ("üîô–ù–∞–∑–∞–¥", "balance")]
		])
		bot.send_message(
			callback.from_user.id,
			f"‚ùóÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n",
			reply_markup=markup,
			parse_mode="HTML"
		)

	elif callback.data == "withdrawal":
		bot.delete_message(callback.from_user.id, callback.message.message_id)
		balance = get_user_balance(callback.from_user.id)
		markup = create_markup([("üîô–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "menu")])
		bot.send_message(
			callback.from_user.id,
			f"üí≥–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{balance}</b>$.\n\n"
			f"<b>–ù–∞–ø–∏—à–∏—Ç–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –≤—ã–≤–æ–¥–∞:</b> @KrestikiNolikiAdmin\n"
			f"(–£—á–∏—Ç—ã–≤–∞–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é)",
			reply_markup=markup,
			parse_mode="HTML"
		)

	elif callback.data == "vip":
		bot.delete_message(callback.from_user.id, callback.message.message_id)
		user_id = callback.from_user.id

		is_vip = check_vip_status(user_id)  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ vip (True –∏–ª–∏ False)
		if is_vip:
			markup = create_markup([("üîô–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "menu")])
			bot.send_message(user_id, "–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å <b>VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</b>! üéâ", reply_markup=markup, parse_mode="HTML")
		else:
			markup = create_markup([[("–ö—É–ø–∏—Ç—å VIPüëë", "buy_vip"), ("üîô–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "menu")]])
			bot.send_message(user_id,
				"–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç <b>VIP-—Å—Ç–∞—Ç—É—Å–∞</b>. –í—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∑–∞ 1000‚≠ê!\n\n"
				"<b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
				"-–ó–Ω–∞—á–æ–∫ VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üëë\n"
				"-–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n",
				reply_markup=markup,
				parse_mode="HTML"
			)
	elif callback.data == "buy_vip":
		bot.delete_message(callback.from_user.id, callback.message.message_id)
		send_invoice(callback.from_user.id, 1000, "vip", "–ü–æ–∫—É–ø–∫–∞ VIP-—Å—Ç–∞—Ç—É—Å–∞")